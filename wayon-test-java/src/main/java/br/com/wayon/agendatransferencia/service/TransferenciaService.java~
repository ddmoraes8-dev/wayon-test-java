package br.com.wayon.agendatransferencia.service;

import br.com.wayon.agendatransferencia.model.Taxa;
import br.com.wayon.agendatransferencia.model.Transferencia;
import br.com.wayon.agendatransferencia.repository.TaxaRepository;
import br.com.wayon.agendatransferencia.repository.TransferenciaRepository;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;

@Service
public class TransferenciaService {

    private final TransferenciaRepository transferenciaRepository;
    private final TaxaRepository taxaRepository;

    public TransferenciaService(TransferenciaRepository transferenciaRepository, TaxaRepository taxaRepository) {
        this.transferenciaRepository = transferenciaRepository;
        this.taxaRepository = taxaRepository;
    }

    public Transferencia scheduleTransfer(Transferencia transfer) {
        long dias = ChronoUnit.DAYS.between(LocalDate.now(), transfer.getDataTransferencia());

        Taxa taxa = taxaRepository.findByDiasDeLessThanEqualAndDiasAteGreaterThanEqual((int) dias, (int) dias)
                .orElseThrow(() -> new IllegalArgumentException("Nenhuma taxa aplic√°vel encontrada para o intervalo de dias: " + dias));

        BigDecimal taxaCalculada = taxa.getTaxaFixa().add(transfer.getAmount().multiply(taxa.getTaxaPercentual().divide(BigDecimal.valueOf(100))));
        transfer.set(taxaCalculada);
        transfer.setDataAgendamento(LocalDate.now());

        return transferRepository.save(transfer);
    }

    public List<Transferencia> listarTodas() {
        return transferenciaRepository.findAll();
    }
}
